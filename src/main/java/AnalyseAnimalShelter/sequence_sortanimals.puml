@startuml

User -> AnimalShelterApp : inputs name or age
AnimalShelterApp -> AnimalService : sortAnimalShelter(SortType: sortType)
AnimalService -> AnimalRepository : getAnimals()
AnimalService <-- AnimalRepository : List<Animal>

alt Sorting by name
AnimalService -> AnimalService : sortAnimalsByName(List<Animal>)

else Sorting by age
AnimalService -> AnimalService : sortAnimalsByAge(List<Animal>)

end

AnimalShelterApp <-- AnimalService : void
User <-- AnimalShelterApp : OK message

@enduml


@startuml

User -> AnimalShelterApp : inputs name or age
AnimalShelterApp -> AnimalService : sortAnimalShelter(SortType: sortType)
AnimalService -> AnimalRepository : getAnimals()
AnimalService <-- AnimalRepository : List<Animal>
AnimalService -> AnimalService : sortAnimalsByName(List<Animal>)
AnimalShelterApp <-- AnimalService : void
User <-- AnimalShelterApp : OK message


@enduml

@startuml
user -> frontend
frontend -> backend_controller
backend_controller -> backend_service
backend_service -> backend_repository
backend_repository -> database
backend_repository <- database
backend_service <- backend_repository
backend_controller <- backend_service
frontend <- backend_controller
user <- frontend
@enduml
@startuml
start
: user Provides getAllTheAnimalsSortedByName Method;
: System retrieves the animals;
: System sorts the animals by name ;
: return list;
end;
@enduml

@startuml
user --> AnimalShelterApp  : Sort Animals by name
AnimalShelterApp --> AnimalService : getAllTheAnimalsSortedByName()
AnimalService --> AnimalRepository : getAnimals()
AnimalService <-- AnimalRepository : List<Animal>

AnimalService --> AnimalService : sortAnimalsByName(List<Animal>)

AnimalShelterApp <-- AnimalService : return Sorted list of animals
user <-- AnimalShelterApp : get sorted list of animals



@endum